name "graph_slam"

using_library 'hogman'
using_library 'envire'
using_library 'graph_slam'
using_library 'vizkit'
using_library 'g2o'
using_library 'velodyne_lidar'

import_types_from 'base'
import_types_from 'stereo'
import_types_from 'envire'
import_types_from 'velodyne_lidar/MultilevelLaserScan.h'

task_context "Task" do

    property('environment_debug_path', 'string').
	doc 'if this property is set, the final environment will be written to the given file path.'

    property('debug_viz', 'bool').
	doc 'switch on/off the debug visualization'

    property('start_pose', '/base/samples/RigidBodyState').
	doc 'path to environment'

    input_port('distance_frames', '/base/samples/DistanceImage').
	needs_reliable_connection.
	doc 'distance images'

    input_port('texture_images', '/base/samples/frame/Frame')

    input_port('stereo_features', '/stereo/StereoFeatureArray').
	needs_reliable_connection.
	doc 'sparse feature array'

    input_port('odometry_delta_samples', '/base/samples/RigidBodyState').
	needs_reliable_connection.
	doc 'delta odometry samples'

    transformer do
	max_latency( 0.2 )

	transformation("laser", "body")	
	transformation("lcamera", "body")
	transformation("body", "odometry")

	align_port("odometry_delta_samples", 0.1)
	align_port("texture_images", 0.1)
	align_port("stereo_features", 0.1)
	align_port("distance_frames", 0.1)
    end

    port_driven
end

task_context "VelodyneSLAM" do
    needs_configuration
    
    ## point cloud filter parameter
    property('maximum_angle_to_neighbor', 'double', 2.53).
        doc('valid neigbors have an angle not greater than this value.').
        doc('the angle is always defined from the origin to the more distant point.')
    property('minimum_valid_neighbors', 'int', 2).
        doc('minimum amount of valid neigbors')
    
    ## slam configuration
    property('vertex_distance', 'double', 0.5).
        doc 'the translation after a new laser scan is added to the graph'
    
    
    ## envire configuration
    property('envire_period', 'double', 1.0).
        doc 'update period in s for the envire_map port.'
    property('environment_debug_path', 'string', "").
        doc 'if this property is set, the final environment will be written to the given file path.'
    property('use_mls', 'bool', false).
        doc 'show a MLS map in envire.'
    property('grid_size_x', 'double', 50.0).
        doc 'x size of the grid in meter'
    property('grid_size_y', 'double', 50.0).
        doc 'y size of the grid in meter'
    property('cell_resolution_x', 'double', 0.1).
        doc 'x cell resolution in meter'
    property('cell_resolution_y', 'double', 0.1).
        doc 'y cell resolution in meter'

    ## input ports
    input_port('lidar_samples', '/velodyne_lidar/MultilevelLaserScan').
        needs_reliable_connection.
        doc 'timestamped 3d laser scans'
        
    input_port('simulated_pointcloud', '/base/samples/Pointcloud').
        needs_reliable_connection.
        doc 'simulated pointcloud data'
        
    input_port('odometry_samples', '/base/samples/RigidBodyState').
        needs_reliable_connection.
        doc 'odometry samples'
        
    ## output ports
    output_port('pose_samples', '/base/samples/RigidBodyState').
        doc 'timestamped samples of the current pose of the robot.'
    
    output_port('envire_map', ro_ptr('std/vector</envire/BinaryEvent>'))
    
    ## transformer config
    transformer do
        max_latency( 0.5 )

        transformation("laser", "body")
        transformation("body", "odometry")

        align_port("lidar_samples", 0.1)
    end
    
    port_driven
end


# Declares a deployment, i.e. an actual executable that contains various tasks.
deployment "graph_slam_test" do
    # This is a test deployment that should not be installed
    do_not_install

    task("graph_slam", "Task")
end

